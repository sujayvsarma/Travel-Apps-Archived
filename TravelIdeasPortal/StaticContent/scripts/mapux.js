/*
    flighthoteltravelideas.com
    © 2019, Sujay V Sarma. All rights reserved.
    Product : flighthoteltravelideas.com
    About this file: This script manages all the client-side interactions of the MapUX view.

    We are using JSDoc to perform type hinting for VS IDE
*/

/**
 * An airport
 */
class Airport {

    /**
     * Construct a new airport
     * @param {string} name - Name of airport
     * @param {string} iata - IATA code of airport
     * @param {string} city - City airport is in
     * @param {string} country - Country airport is in
     * @param {string} isoCountry - ISO Country code
     * @param {number} lat - Latitude coordinates of airport
     * @param {number} lon - Longitude coordinates of airport
     */
    constructor(name, iata, city, country, isoCountry, lat, lon) {
        this.Name = name;
        this.Country = country;
        this.ISOCountry = isoCountry;
        this.City = city;
        this.Iata = iata;
        this.Lat = lat;
        this.Lon = lon;
    }

    get Name() { return this._name; }
    set Name(name) { this._name = name; }

    get Iata() { return this._iata; }
    set Iata(iata) { this._iata = iata; }

    get City() { return this._city; }
    set City(city) { this._city = city; }

    get Country() { return this._country; }
    set Country(country) { this._country = country; }

    get ISOCountry() { return this._isoCountry; }
    set ISOCountry(iso_country) { this._isoCountry = iso_country; }

    get Lat() { return this._lat; }
    set Lat(lat) { this._lat = lat; }

    get Lon() { return this._lon; }
    set Lon(lon) { this._lon = lon; }
}


/**
 * A leg in the itinerary
 */
class TripLeg {

    /**
     * Create a new trip leg
     * @param {number} id - Id of the trip
     * @param {Airport} origin - Airport of origin
     * @param {Airport} destination - Airport of destination
     * @param {NetFxDate} departure - Date of departure
     * @param {string} classOfTravel - Class of travel ("economy","premiumeconomy","business","first")
     */
    constructor(id, origin, destination, departure, classOfTravel) {
        this.Id = id;
        this.Origin = origin;
        this.Destination = destination;
        this.Departure = departure;
        this.Passengers = {
            Adults: 1,
            Children: 0,
            Infants: 0
        };
        this.ClassOfTravel = classOfTravel;
    }

    get Id() { return this._id; }
    set Id(id) { this._id = id; }

    get Origin() { return this._origin; }
    set Origin(airport) { this._origin = airport; }

    get Destination() { return this._destination; }
    set Destination(airport) { this._destination = airport; }

    get Departure() { return this._departure; }
    set Departure(date) { this._departure = date; }

    get Passengers() { return this._passengers; }
    set Passengers(pax) { this._passengers = pax; }

    get ClassOfTravel() { return this._classOfTravel; }
    set ClassOfTravel(cot) { this._classOfTravel = cot; }

    /**
     * Set passenger count
     * @param {number} adults - Number of adults
     * @param {number} children - Number of children
     * @param {number} infants - Number of infants
     */
    SetPassengers(adults, children, infants) {
        this.Passengers = {
            Adults: adults,
            Children: children,
            Infants: infants
        };
    }

    /**
     * Create a URL-encoded string for form-submission
     */
    ToFormString() {
        return 'leg' + this._id.toString() + '=' + 
            this._origin.Iata + ',' + this._origin.ISOCountry + '|' + this._destination.Iata + ',' + this._destination.ISOCountry + '|' + 
            this._departure.ToStringNetFx() + '|' + 
            this._passengers.Adults + ',' + this._passengers.Children + ',' + this._passengers.Infants + '|' + 
            this._classOfTravel;
    }
}

/** 
 *  Encapsulation of the functionality of the Map UX.
 */
class MapUX {

    /**
     * Initialize the MapUX class
     * 
     * @param {string} mapControlId - 'id' without the preceding '#' of the DIV to contain the Azure Map rendering
     * @param {string} hostName - Hostname for the API callback URLs
     * @param {string} apiToken - Xsrf token for API callbacks (dynamically generated by server)
     * @param {string} atlasId - Client ID for the Azure Atlas Service
     * @param {number} startLat - Latitude to set focus to when the UX loads
     * @param {number} startLon - Longitude to set focus to when the UX loads
     */
    constructor(mapControlId, hostName, apiToken, atlasId, subscriptionKey, startLat, startLon) {
        if (!document.getElementById(mapControlId)) {
            console.error('Error! Could not find a DOM element with Id #' + mapControlId);
            return;
        }

        this._setInitVars(hostName, apiToken, atlasId, subscriptionKey);

        // initialize azure maps
        this._showActivityAnimation('Initializing...');
        this._itinerary = new Array();
        var lang = navigator.language;
        var mapsLanguages = ['af-ZA', 'ar-SA', 'eu-ES', 'bg-BG', 'ca-ES', 'zh-HanS', 'zh-HanT', 'hr-HR', 'cs-CZ', 'da-DK', 'nl-NL', 'nl-BE', 'en-AU', 'en-NZ', 'en-GB', 'en-US', 'et-EE', 'fi-FI', 'fr-FR', 'fr-CA', 'gl-ES', 'de-DE', 'el-GR', 'he-IL', 'hi-IN', 'hu-HU', 'id-ID', 'it-IT', 'ja-JP', 'kk-KZ', 'ko-KR', 'es-419', 'lv-LV', 'lt-LT', 'ms-MY', 'nb-NO', 'NGT', 'NGT-Latn', 'pl-PL', 'pt-BR', 'pt-PT', 'ro-RO', 'ru-RU', 'sr-Cyrl-RS', 'sr-Latn-RS', 'sk-SK', 'sl-SL', 'es-ES', 'es-MX', 'sv-SE', 'th-TH', 'tr-TR', 'uk-UA', 'vi-VN'];
        if (mapsLanguages.indexOf(lang) === -1) {
            switch (lang.substring(0, 1)) {
                case 'en':
                    lang = 'en-US'; break;
                case 'fr':
                    lang = 'fr-FR'; break;
                default:
                    lang = 'en-US'; break;
            }
        }
        this._initializeMaps(mapControlId, lang, startLat, startLon);

        $('#locationInfoDialog').on('hidden.bs.modal', () => { this._map.setCamera({ zoom: 5 }); });

        // we dont hide the loader here, 
        // it is hidden inside the _initializeMaps() -> this._map.events.add('ready'..) event handler!
    }

    /**
     * Initialize the maps control
     */
    _initializeMaps(mapControlId, language, zoomLat, zoomLon) {

        //var tokenHostName = 'https://' + this._INIT_VARS.api.internal.hostName + '/MapsAuthenticate/' + this._INIT_VARS.api.internal.token;
        var mapAuthOptions = {
            authType: 'subscriptionKey',
            subscriptionKey: this._INIT_VARS.api.atlas.subscriptionKey
            //clientId: this._INIT_VARS.api.atlas.clientId,
            //getToken: function (resolve, reject, map) {
            //    fetch(tokenHostName).then(r => r.text()).then(t => resolve(t));
            //}
        };

        this._map = new atlas.Map(
            mapControlId,
            {
                authOptions: mapAuthOptions,
                renderWorldCopies: false,
                language: language,
                view: 'Auto',
                center: [zoomLon, zoomLat],
                zoom: 12
            }
        );

        this._map.events.add('load', () => {
            this._map.getCanvasContainer().style.cursor = "pointer";

            var canvas = this._map.getCanvas();
            canvas.title = 'Plan your business trip, vacation or other event';
            canvas.alt = 'Plan your business trip, vacation or other event';

            this._mapPopup = new atlas.Popup({
                fillColor: 'rgba(0,0,0,0.8)'
            });

            var ds = new atlas.source.DataSource();
            this._map.sources.add(ds);

            var rl = new atlas.layer.SymbolLayer(ds, null, {
                iconOptions: {
                    image: 'pin-round-darkblue',
                    anchor: 'center',
                    allowOverlap: true
                },
                textOptions: {
                    anchor: "top"
                }
            });
            this._map.layers.add(rl);

            this._routePointsDataSource = new atlas.source.DataSource();
            this._map.sources.add(this._routePointsDataSource);

            var routeLinesLayer = new atlas.layer.LineLayer(this._routePointsDataSource, null, {
                strokeColor: '#343a40',
                strokeWidth: 2,
                visible: true
            });
            this._map.layers.add(routeLinesLayer);

            this._map.controls.add(new atlas.control.StyleControl({ mapStyles: ['road', 'grayscale_light', 'night', 'grayscale_dark', 'satellite', 'satellite_road_labels'] }), { position: "bottom-left" });
            this._map.controls.add(new atlas.control.ZoomControl(), { position: 'bottom-right' });
            this._map.controls.add(new atlas.control.PitchControl(), { position: 'bottom-left' });

            this._hideActivityAnimation();
        });

        this._map.events.add('click', (e) => {
            this._getLocationInformation(new Coordinate(e.position[1], e.position[0]));
        });
    }

    /**
     * Show the activity animation
     * @param {string} message - The message to show
     */
    _showActivityAnimation(message) {
        $('#plannerLoaderOverlay #message').html(message);
        $('#plannerLoaderOverlay').show(message);
    }

    /**
     * Hide the activity animation
     */
    _hideActivityAnimation() {
        $('#plannerLoaderOverlay').hide();
    }

    /**
     * Get information about the provided location and display the information box
     * @param {Coordinate} latLon
     */
    _getLocationInformation(latLon) {
        this._showActivityAnimation('Searching for information...');

        var instance = this;
        var hostName = this._INIT_VARS.api.internal.hostName, token = this._INIT_VARS.api.internal.token;

        var ajaxSuccessCallback = function (data) {
            instance._hideActivityAnimation();
            instance._getLocationInformation_ajax_processResponse(data, instance);
        };

        $.ajax(
            {
                method: 'GET',
                url: 'https://' + hostName + '/ResolveLocation/' + token + '?lat=' + latLon.Latitude + '&lon=' + latLon.Longitude,
                cache: true,
                dataType: 'json',
                success: ajaxSuccessCallback,
                error: function () {
                    instance._hideActivityAnimation();
                    alert('No information was found about that location. Click somewhere else, or try zooming in and clicking again.');
                }
            }
        );
    }

    /**
     * Process response to the success result in the ajax call inside _getLocationInformation()
     * @param {any} data - Data returned by the Ajax call
     */
    _getLocationInformation_ajax_processResponse(data, mapUxInstance) {

        if ((data === null) || (data === '')) {
            alert('No information was found about that location. Click somewhere else, or try zooming in and clicking again.');
            return;
        }

        var isFirstLocation = (mapUxInstance._itinerary.length == 0);
        var flyHereButtonLabel = (isFirstLocation ? 'Start here' : 'Fly here');
        var flyHereButtonImage = (isFirstLocation ? 'takeoff' : 'landing');
        var buttonHandler = (isFirstLocation ? mapUxInstance._event_locationInfoStartHereButton_click : mapUxInstance._event_locationInfoFlyHereButton_click);

        $('#locationInfoDialog #locationInfoPlaceName').html(data.city + ' (' + ((data.nativeName !== undefined) ? data.nativeName : data.city) + ')');
        $('#locationInfoDialog #locationInfo_coord_lat').html(data.latLon.lat.toFixed(3) + ' <sup>o</sup>' + ((data.latLon.lat > 0) ? 'N' : 'S'));
        $('#locationInfoDialog #locationInfo_coord_lon').html(data.latLon.lon.toFixed(3) + ' <sup>o</sup>' + ((data.latLon.lat > 0) ? 'E' : 'W'));

        $('#locationInfoDialog #locationInfo_country_flag').html('<img class="mr-2" src="https://www.countryflags.io/' + data.country.isoCountryCode + '/flat/16.png" />');
        $('#locationInfoDialog #locationInfo_country_name').html(data.country.name);
        $('#locationInfoDialog #locationInfo_country_iso').html(data.country.isoCountryCode);
        $('#locationInfoDialog #locationInfo_tz').html(data.country.timezones.join(', '));
        $('#locationInfoDialog #locationInfo_currency_name').html(data.country.currencies[0].name);
        $('#locationInfoDialog #locationInfo_currency_code').html(data.country.currencies[0].code);
        $('#locationInfoDialog #locationInfo_currency_symbol').html(data.country.currencies[0].symbol);

        $('#locationInfoDialog #locationInfoAirportsList').html('');
        $('#locationInfoDialog #locationInfoTabContent_startOrFlyHereLabel').html(flyHereButtonLabel);

        for (var i = 0; i < data.airports.length; i++) {
            var airportElement = $('<tr id="' + data.airports[i].iata + '"></tr>');

            var airportInfo = '<td>' + data.airports[i].distanceFromClick + ' km</td>';
            airportInfo += '<td>' + (data.airports[i].municipality ? data.airports[i].municipality : data.airports[i].name) + '<br/>(' + data.airports[i].region + ', ' + data.airports[i].country + ')</td>';
            airportInfo += '<td>';
            if (data.airports[i].homepage) {
                airportInfo += '<a target="_blank" href="' + data.airports[i].homepage + '"><strong>' + data.airports[i].name + '</strong></a>';
            }
            else {
                airportInfo += '<strong>' + data.airports[i].name + '</strong>';
            }
            if (data.airports[i].wikipedia) {
                airportInfo += '<br/>(<a target="_blank" href="' + data.airports[i].wikipedia + '">See WikiPedia</a>)';
            }
            airportInfo += '</td>';

            airportElement.html(airportInfo);

            var isLastLegAirport = ((mapUxInstance._itinerary.length > 0) && (mapUxInstance._itinerary[mapUxInstance._itinerary.length - 1].Iata === data.airports[i].iata));
            if (!isLastLegAirport) {
                var flyHereButton = $('<button id="btnFlyHereButton' + data.airports[i].iata + '"></button>');
                flyHereButton.addClass('float-right btn btn-warning text-dark font-weight-bold');
                flyHereButton.html('<img src="/StaticContent/images/aircraft-' + flyHereButtonImage + '.svg" width="32" height="16" />' + data.airports[i].iata);

                flyHereButton.on(
                    'click',
                    {
                        instance: mapUxInstance,
                        airport: data.airports[i],
                        button: flyHereButton
                    },
                    buttonHandler
                );

                var cell = $('<td></td>');
                cell.append(flyHereButton);

                airportElement.append(cell);
            }
            else {
                airportElement.append('<td>&nbsp;</td>');
            }

            $('#locationInfoDialog #locationInfoAirportsList').append(airportElement);
        }

        var wikiTable = '';
        if (data.wikiLinks.length > 0) {
            for (var i = 0; i < data.wikiLinks.length; i++) {
                wikiTable += '<table class="table w-100 mt-2 p-3"><tr><td>';
                if (data.wikiLinks[i].thumbnail) {
                    wikiTable += '<img src="' + data.wikiLinks[i].thumbnail + '" width="120" align="left" class="mr-2 mb-2" />';
                }
                wikiTable += data.wikiLinks[i].text
                    + '<p class="text-right"><a href="' + data.wikiLinks[i].wikiPageUrl + '" target="_blank">Read more...</a></p>'
                    + '</td></tr></table>';
            }
        }
        else {
            wikiTable = '<div class="p-5">WikiPedia did not return any data for this location.</div>';
        }

        $('#locationInfoDialog #locationInfoWikiLinks').html(wikiTable);

        // Ensure we set focus on the airport tab
        $('#locationInfoDialog #tabAirports').addClass('active');
        $('#locationInfoDialog #tabAirportsContent').addClass('show');
        $('#locationInfoDialog #tabAirportsContent').addClass('active');

        $('#locationInfoDialog #tabWiki').removeClass('active');
        $('#locationInfoDialog #tabWikiContent').removeClass('show');
        $('#locationInfoDialog #tabWikiContent').removeClass('active');

        $('#locationInfoDialog').modal('show');
    }

    /**
     * Event handler for the "Fly here" button on the Location Info dialog
     * @param {any} eventArgs - button click event arguments
     */
    _event_locationInfoFlyHereButton_click(eventArgs) {
        eventArgs.preventDefault();

        $('#locationInfoDialog').modal('hide');

        var btn = eventArgs.data.button;
        if (btn.hasClass('hide')) {
            alert('Thank you for trying to hack the website, but...!');
            return;
        }

        btn.off('click');

        var instance = eventArgs.data.instance;
        var airport = eventArgs.data.airport;
        var origin = ((instance._itinerary.length === 0) ? null : instance._itinerary[instance._itinerary.length - 1]);
        var depDate = (new NetFxDate(new Date()));
        depDate = depDate.AddDays(1);

        var previousAirport = (origin ? ((origin.Destination === null) ? origin.Origin : origin.Destination) : null);
        depDate = (new NetFxDate(origin.Departure));
        depDate = depDate.AddDays(1);

        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_text_title').html('from ' + previousAirport.Iata + ' to ' + airport.iata);
        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_text_origin').html(
            '<strong>' + previousAirport.Name + '</strong><br/>' +
            '(IATA: ' + previousAirport.Iata + ', ' + previousAirport.Country + ')'
        );

        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_text_dest').html(
            '<strong>' + airport.name + '</strong><br/>' +
            '(IATA: ' + airport.iata + ', ' + airport.country + ')'
        );
        
        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_departure').val(depDate.ToStringUX());
        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_adults').val(origin.Passengers.Adults);
        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_children').val(origin.Passengers.Children);
        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_infants').val(origin.Passengers.Infants);

        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_saveButton').on(
            'click',
            {
                instance: instance,
                origin: previousAirport,
                destination: airport,
                legId: -1                           // to be consistent
            },
            instance._event_destinationAddOrEditDialog_saveButton_click
        );

        $('#destinationAddOrEditDialog').modal('show');
    }

    /**
     * Event handler for the "Add leg to itinerary" dialog's SAVE button
     * @param {any} eventArgs - button click event arguments
     */
    _event_destinationAddOrEditDialog_saveButton_click(eventArgs) {
        eventArgs.preventDefault();

        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_saveButton').off('click');
        $('#destinationAddOrEditDialog').modal('hide');

        var instance = eventArgs.data.instance;
        var origin = eventArgs.data.origin;
        var destination = eventArgs.data.destination;
        var legId = eventArgs.data.legId;

        var departureDate = new NetFxDate($('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_departure').val());
        var classOfTravel = $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_classOfTravel').children("option:selected").val();
        var pax_adt = $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_adults').val();
        var pax_chi = $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_children').val();
        var pax_inf = $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_infants').val();

        if ((origin === null) && (destination !== null)) {
            origin = destination;
            destination = null;
        }

        if (origin !== null) {
            if (!(origin instanceof Airport)) {
                var o = new Airport(origin.name, origin.iata, origin.city, origin.country, origin.isoCountry, origin.lat, origin.lon);
                origin = o;
            }
        }

        if (destination !== null) {
            if (!(destination instanceof Airport)) {
                var d = new Airport(destination.name, destination.iata, destination.city, destination.country, destination.isoCountry, destination.lat, destination.lon);
                destination = d;
            }
        }

        instance._addOrUpdateLeg(legId, origin, destination, departureDate, pax_adt, pax_chi, pax_inf, classOfTravel);
        instance._redrawMarkersAndRoutes();
    }

    /**
     * Event handler for the "Add leg to itinerary" dialog's DELETE button
     * @param {any} eventArgs - button click event arguments
     */
    _event_destinationAddOrEditDialog_deleteButton_click(eventArgs) {
        eventArgs.preventDefault();

        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_deleteButton').off('click');
        $('#destinationAddOrEditDialog').modal('hide');

        var instance = eventArgs.data.instance;
        var legId = eventArgs.data.legId;

        var delLeg = instance._itinerary[legId];
        var oldDep = delLeg.Departure;
        var prevMaxLegId = instance._itinerary.length - 1;

        instance._itinerary.splice(legId, 1);

        // adjust other legs
        if (legId < prevMaxLegId) {

            for (var i = legId; i < instance._itinerary.length; i++) {
                var legDep = new NetFxDate(instance._itinerary[i].Departure);
                var depTime = oldDep._date.getTime(), legTime = legDep._date.getTime();
                var days = (legTime - depTime) / 86400000;

                instance._itinerary[i].Id = i;
                instance._itinerary[i].Departure.AddDays(-days);

                oldDep = legDep;
            }

            var dialog = new MapUXDialog();
            dialog.Show(
                EnumDialogType.Warning,
                'Missing Leg',
                'Because you deleted a leg, your itinerary is no longer contiguous. You can go ahead and book this itinerary.<br/><br/>' +
                'But if you want to get from <strong>' + delLeg.Origin.City + ' (' + delLeg.Origin.Iata + ')</strong> to <strong>' + delLeg.Destination.City + ' (' + delLeg.Destination.Iata + ')</strong>:' + 
                '<ul class="mt-2"><li>You will need to use other means of travel OR,</li><li>You will need to replan your travel.</li></ul>'
            );
        }        

        instance._redrawMarkersAndRoutes();
    }

    /**
     * Event handler for the "Start here" button on the location info dialog --- 
     * this button only appears when the itinerary is empty
     * @param {any} eventArgs - button click event arguments
     */
    _event_locationInfoStartHereButton_click(eventArgs) {
        eventArgs.preventDefault();

        $('#locationInfoDialog').modal('hide');
        eventArgs.data.button.off('click');

        var instance = eventArgs.data.instance;
        var airport = eventArgs.data.airport;

        instance._addOrUpdateLeg(
            -1,
            new Airport(airport.name, airport.iata, airport.city, airport.country, airport.isoCountry, airport.lat, airport.lon),
            null, null, 1, 0, 0
        );
        instance._redrawMarkersAndRoutes();
    }

    /**
     * Event handler for the table cell in the top itinerary bar. We essentially call the 
     * destinationAddOrEditDialog with a small tweak (a delete button!)
     * @param {any} eventArgs - cell click event arguments
     */
    _event_itineraryItem_click(eventArgs) {
        eventArgs.preventDefault();

        var instance = eventArgs.data.instance;
        var id = eventArgs.data.id;
        var leg = eventArgs.data.leg;

        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_text_title').html('from ' + leg.Origin.Iata + ' to ' + leg.Destination.Iata);
        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_text_origin').html(
            '<strong>' + leg.Origin.Name + '</strong><br/>' +
            '(IATA: ' + leg.Origin.Iata + ', ' + leg.Origin.Country + ')'
        );

        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_text_dest').html(
            '<strong>' + leg.Destination.Name + '</strong><br/>' +
            '(IATA: ' + leg.Destination.Iata + ', ' + leg.Destination.Country + ')'
        );

        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_departure').val(leg.Departure.ToStringUX());
        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_adults').val(leg.Passengers.Adults);
        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_children').val(leg.Passengers.Children);
        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_field_infants').val(leg.Passengers.Infants);

        $('#destinationAddOrEditDialog #destinationAddOrEditDialog_saveButton').on(
            'click',
            {
                instance: instance,
                origin: leg.Origin,
                destination: leg.Destination,
                legId: id
            },
            instance._event_destinationAddOrEditDialog_saveButton_click
        );

        // add a delete button
        var deleteButton = $(
            '<button type="button" id="destinationAddOrEditDialog_deleteButton" class="btn btn-danger text-white font-weight-bold">' + 
            '<span class="glyphicon glyphicon-trash"></span>Delete</button>'
        );

        deleteButton.on(
            'click',
            {
                instance: instance,
                legId: id,
                button: deleteButton
            },
            instance._event_destinationAddOrEditDialog_deleteButton_click
        );

        deleteButton.insertBefore('#destinationAddOrEditDialog #destinationAddOrEditDialog_saveButton');
        $('#destinationAddOrEditDialog').on('hidden.bs.modal', (e) => {
            $('#destinationAddOrEditDialog').off('hidden.bs.modal');
            $('#destinationAddOrEditDialog #destinationAddOrEditDialog_deleteButton').remove();
        });

        $('#destinationAddOrEditDialog').modal('show');
    }

    /**
     * Event handler for the Get Tickets button on the top itinerary bar.
     * @param {any} eventArgs - button click event arguments
     */
    _event_btnTicketButton_click(eventArgs) {
        eventArgs.preventDefault();
        eventArgs.data.button.off('click');

        var instance = eventArgs.data.instance;
        var submitString = 'legs=' + instance._itinerary.length.toString();
        for (var i = 0; i < instance._itinerary.length; i++) {
            submitString += '&' + instance._itinerary[i].ToFormString();
        }

        window.location.href = '/Tickets?' + submitString;
    }


    /**
     * Redraw the route markers and the route link lines on the map
     */
    _redrawMarkersAndRoutes() {
        this._routePointsDataSource.clear();
        var itineraryMapTableRow = $('#itineraryMapTableRow');
        itineraryMapTableRow.html('');

        if (this._itinerary.length > 0) {
            var drawnAirports = new Array();
            var canTicket = false;

            for (var i = 0; i < this._itinerary.length; i++) {
                var leg = this._itinerary[i];

                if ((leg.Origin !== null) && (drawnAirports.indexOf(leg.Origin.Iata) === -1)) {
                    this._addItineraryHaltMarker(
                        new Coordinate(leg.Origin.Lat, leg.Origin.Lon),
                        leg.Origin.Iata,
                        leg.Origin.Country
                    );

                    drawnAirports.push(leg.Origin.Iata);
                }

                if ((leg.Destination !== null) && (drawnAirports.indexOf(leg.Destination.Iata) === -1)) {
                    this._addItineraryHaltMarker(
                        new Coordinate(leg.Destination.Lat, leg.Destination.Lon),
                        leg.Destination.Iata,
                        leg.Destination.Country
                    );

                    drawnAirports.push(leg.Destination.Iata);
                }

                if ((leg.Origin !== null) && (leg.Destination !== null)) {
                    this._routePointsDataSource.add(
                        new atlas.data.LineString(
                            [
                                [leg.Origin.Lon, leg.Origin.Lat],
                                [leg.Destination.Lon, leg.Destination.Lat]
                            ]
                        )
                    );

                    if (!canTicket) {
                        canTicket = true;
                    }
                }

                // do not add a topbar item if there is no destination
                if (leg.Destination !== null) {
                    var legCell = $(
                        '<td id="itineraryMapTableCell' + i.toString() + '" class="text-center text-white" style="width: 148px !important; cursor: pointer;">' +
                        '<table class="table bg-transparent p-2 btn btn-success" style="width: 148px !important; font-size: 100%;"><tbody class="bg-transparent"><tr>' +
                        '<td class="p-1" colspan="2"><span class="glyphicon glyphicon-calendar"></span>' + (leg.Departure ? leg.Departure.ToStringUX() : 'TBD') + '</td>' + 
                        '</tr><tr><td class="p-1">' + ((leg.Origin === null) ? '' : '<img src="/StaticContent/images/aircraft-takeoff.svg" class="mr-1" height="24" width="24" /><br/>' + leg.Origin.Iata) + '</td>' +
                        '<td class="p-1">' + ((leg.Destination === null) ? '' : '<img src="/StaticContent/images/aircraft-landing.svg" class="mr-1" height="24" width="24" /><br/>' + leg.Destination.Iata) + '</td>' +
                        '</tr></tbody></table>' +
                        '</td>'
                    );

                    legCell.on(
                        'click',
                        {
                            instance: this,
                            cell: legCell,
                            leg: leg,
                            id: i
                        },
                        this._event_itineraryItem_click
                    );

                    itineraryMapTableRow.append(legCell);
                }
            }

            itineraryMapTableRow.append('<td style="width: 100%;">&nbsp;</td>');

            if (canTicket) {
                var ticketButton = $('<button id="btnTicketButton" style="width:148px;height:96px;font-size:110%;"></button>');
                ticketButton.addClass('btn btn-warning text-dark text-center font-weight-bold');
                ticketButton.html('<span class="glyphicon glyphicon-shopping-cart"></span><br/>Get Tickets');

                ticketButton.on(
                    'click',
                    {
                        instance: this,
                        button: ticketButton
                    },
                    this._event_btnTicketButton_click
                );

                var cell = $('<td></td>');
                cell.append(ticketButton);

                itineraryMapTableRow.append(cell);
            }
        }
        else {
            itineraryMapTableRow.html('<td style="width: 100%;">&nbsp;</td>');
        }
        
    }

    /**
     * Adds a route marker for an itinerary halt
     * @param {Coordinate} location
     * @param {string} iata
     * @param {string} country
     */
    _addItineraryHaltMarker(location, iata, country) {
        var marker = new atlas.HtmlMarker({
            htmlContent: this._svgMarkerAdded,
            text: iata,
            color: '#343a40',
            position: [location.Longitude, location.Latitude],
        });

        marker.properties = {
            iata: iata,
            country: country
        };

        this._map.markers.add(marker);
        this._map.events.add('click', marker, (e) => {
            e.preventDefault();
            this._getLocationInformation(
                new Coordinate(e.target.options.position[1], e.target.options.position[0])
            );
        });
    }

    /**
     * Add or update a leg into the itinerary
     * @param {number} id - Id of the leg
     * @param {Airport} origin - Origin airport
     * @param {Airport} destination - Destination airport
     * @param {NetFxDate} departure - Date of departure from origin
     * @param {number} adults - Number of adults (at least 1)
     * @param {number} children - Number of children (can be zero)
     * @param {number} infants - Number of infants (can be zero)
     * @param {string} classOfTravel - Class of travel ("economy","premiumeconomy","business","first")
     */
    _addOrUpdateLeg(id, origin, destination, departure, adults, children, infants, classOfTravel) {
        adults = ((adults <= 0) ? 1 : adults);
        children = ((children < 0) ? 0 : children);
        infants = ((infants < 0) ? 0 : infants);

        if (!classOfTravel) {
            classOfTravel = "economy";
        }

        var leg;
        if (id == -1) {
            if (this._itinerary.length > 0) {
                var lastElementId = this._itinerary.length - 1;
                if (this._itinerary[lastElementId].Destination === null) {
                    leg = this._itinerary[lastElementId];
                    leg.Destination = destination;
                    leg.Departure = departure;
                    leg.ClassOfTravel = classOfTravel;
                    leg.SetPassengers(adults, children, infants);

                    // be consistent
                    this._itinerary[lastElementId] = leg;
                    return;
                }
            }

            leg = new TripLeg(this._itinerary.length, origin, destination, departure, classOfTravel);
            leg.SetPassengers(adults, children, infants);
            this._itinerary.push(leg);
        }
        else {
            leg = this._itinerary[id];
            leg.Origin = origin;
            leg.Destination = destination;
            leg.Departure = departure;
            leg.ClassOfTravel = classOfTravel;
            leg.SetPassengers(adults, children, infants);

            // be consistent
            this._itinerary[id] = leg;
        }
    }

    /**
     * SVG glyph for a location that has been added to the itinerary
     */
    get _svgMarkerAdded() {
        return '<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48" xml:space="preserve">' +
            '<rect x="0" y="0" rx="8" ry="8" width="48" height="30" fill="{color}" />' +
            '<polygon fill="{color}" points="10,29 20,29 15,37 10,29" />' +
            '<text x="10" y="20" style="font-size:12px;font-family:arial;fill:#ffffff;" text-anchor="left">{text}</text>' +
            '</svg>';
    }

    /**
     * Initialization variables cached
     */
    get _INIT_VARS() {
        if (this._initvars === null) {
            this._initvars = {
                api: {
                    internal: {
                        hostName: 'localhost',
                        token: ''
                    },
                    atlas: {
                        clientId: '',
                        subscriptionKey: ''
                    }
                }
            };
        }

        return this._initvars;
    }

    /**
     * Set the initialization variables into internal state
     * @param {string} internalHostName
     * @param {string} apiToken
     * @param {string} atlasId
     */
    _setInitVars(internalHostName, apiToken, atlasId, subscriptionKey) {
        this._initvars = {
            api: {
                internal: {
                    hostName: internalHostName,
                    token: apiToken
                },
                atlas: {
                    clientId: atlasId,
                    subscriptionKey: subscriptionKey
                }
            }
        };
    }
}